name: Fetch New Releases

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  check-schedule:
    name: Check Run Schedule
    runs-on: ubuntu-latest
    environment: gh-actions
    outputs:
      run: ${{ steps.check.outputs.run }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: eu-west-1

      - name: Check if run is scheduled
        id: check
        run: |
          aws s3 cp s3://radswn-spotify-auth-cache/next_run.txt next_run.txt
          next_run=$(cat next_run.txt)
          today=$(date -u +"%Y-%m-%d")

          echo "Next run scheduled for: $next_run"
          if [[ "$today" == "$next_run" ]]; then
              echo "Scheduled to run today."
              echo "run=true" >> "$GITHUB_OUTPUT"
          else
              echo "Not scheduled to run today."
              echo "run=false" >> "$GITHUB_OUTPUT"
          fi


  fetch-releases:
    name: Fetch New Releases
    needs: check-schedule
    if: needs.check-schedule.outputs.run == 'true'
    runs-on: ubuntu-latest
    environment: gh-actions

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: eu-west-1

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.7'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Download cached tokens from S3
        run: aws s3 cp s3://radswn-spotify-auth-cache/.spotipy_cache .spotipy_cache --recursive

      - name: Run script for fetching new releases
        env:
          SPOTIPY_CLIENT_ID: ${{ secrets.SPOTIPY_CLIENT_ID }}
          SPOTIPY_CLIENT_SECRET: ${{ secrets.SPOTIPY_CLIENT_SECRET }}
          SPOTIPY_REDIRECT_URI: ${{ secrets.SPOTIPY_REDIRECT_URI }}
        run: poetry run python src/crate_digger/main/fetch_new_releases.py

      - name: Upload refreshed tokens back to S3
        run: aws s3 cp .spotipy_cache s3://radswn-spotify-auth-cache/.spotipy_cache --recursive


  update-schedule:
    name: Update Schedule
    needs: check-schedule
    if: needs.check-schedule.outputs.run == 'true'
    runs-on: ubuntu-latest
    environment: gh-actions

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: eu-west-1

      - name: Calculate and upload next run date
        run: |
          today=$(date -u +"%Y-%m-%d")
          next_run=$(date -u -d "$today + 14 days" +"%Y-%m-%d")
          echo "$next_run" > next_run.txt
          aws s3 cp next_run.txt s3://radswn-spotify-auth-cache/next_run.txt